{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,kBAAkB,EAAE,YAAY,EAAgB,MAAM,mBAAmB,CAAC;AAEnF,OAAO,iBAAiB,MAAM,qBAAqB,CAAC;AAGpD;;GAEG;AACH,MAAM,UAAU,SAAS,CAAC,OAAsB;IAC9C,iBAAiB,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;AACvC,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,WAAW,CAAC,OAAuB;IACjD,iBAAiB,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;AACzC,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,WAAW,CAAC,KAAa,EAAE,QAAgB;IACzD,iBAAiB,CAAC,WAAW,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;AACjD,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,gBAAgB,CAAC,WAAwB;IACvD,iBAAiB,CAAC,gBAAgB,CAAC,WAAW,CAAC,CAAC;AAClD,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,eAAe,CAAC,KAAsB;IACpD,iBAAiB,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;AAC3C,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,MAAM;IACpB,iBAAiB,CAAC,MAAM,EAAE,CAAC;AAC7B,CAAC;AAED;;;GAGG;AACH,MAAM,UAAU,YAAY;IAC1B,iBAAiB,CAAC,YAAY,EAAE,CAAC;AACnC,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,YAAY,CAAC,KAAa;IACxC,iBAAiB,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;AACxC,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,WAAW;IACzB,iBAAiB,CAAC,WAAW,EAAE,CAAC;AAClC,CAAC;AAED,MAAM,OAAO,GAAG,IAAI,YAAY,CAAC,iBAAiB,IAAI,kBAAkB,CAAC,WAAW,CAAC,CAAC;AAEtF,MAAM,UAAU,eAAe,CAAC,QAA2C;IACzE,OAAO,OAAO,CAAC,WAAW,CAAmB,QAAQ,EAAE,QAAQ,CAAC,CAAC;AACnE,CAAC;AAED,MAAM,UAAU,sBAAsB,CAAC,QAA0C;IAC/E,OAAO,OAAO,CAAC,WAAW,CAAkB,aAAa,EAAE,QAAQ,CAAC,CAAC;AACvE,CAAC;AAED,MAAM,UAAU,uBAAuB,CAAC,QAAsC;IAC5E,OAAO,OAAO,CAAC,WAAW,CAAc,cAAc,EAAE,QAAQ,CAAC,CAAC;AACpE,CAAC;AAED,MAAM,UAAU,2BAA2B,CAAC,QAAgD;IAC1F,OAAO,OAAO,CAAC,WAAW,CAAgB,kBAAkB,EAAE,QAAQ,CAAC,CAAC;AAC1E,CAAC;AAED,MAAM,UAAU,sBAAsB,CAAC,QAA6C;IAClF,OAAO,OAAO,CAAC,WAAW,CAAoB,aAAa,EAAE,QAAQ,CAAC,CAAC;AACzE,CAAC","sourcesContent":["import { NativeModulesProxy, EventEmitter, Subscription } from 'expo-modules-core';\n\nimport ExpoBoxoSdkModule from './ExpoBoxoSdkModule';\nimport { MiniappListResult, MiniappData, LifecycleData, CustomEventData, PaymentData, AuthEventPayload, ConfigOptions, MiniappOptions } from './ExpoBoxoSdk.types';\n\n/**\n * Set global configs\n */\nexport function setConfig(options: ConfigOptions) {\n  ExpoBoxoSdkModule.setConfig(options);\n}\n\n/**\n * Open miniapp with options\n */\nexport function openMiniapp(options: MiniappOptions) {\n  ExpoBoxoSdkModule.openMiniapp(options);\n}\n\n/**\n * get AuthCode from hostapp backend and send it to miniapp\n */\nexport function setAuthCode(appId: string, authCode: string) {\n  ExpoBoxoSdkModule.setAuthCode(appId, authCode);\n}\n\n/**\n * send payment event to miniapp\n */\nexport function sendPaymentEvent(paymentData: PaymentData) {\n  ExpoBoxoSdkModule.sendPaymentEvent(paymentData);\n}\n\n/**\n * send custom event to miniapp\n */\nexport function sendCustomEvent(event: CustomEventData) {\n  ExpoBoxoSdkModule.sendCustomEvent(event);\n}\n\n/**\n * When host app user logs out, it is highly important to clear all miniapp storage data.\n */\nexport function logout() {\n  ExpoBoxoSdkModule.logout();\n}\n\n/**\n * Miniapp opens on a native screen. To show payment processing page need to hide miniapp screen.\n * To use this function need to enable 'multitaskMode: true' in Boxo.setConfig()\n */\nexport function hideMiniapps() {\n  ExpoBoxoSdkModule.hideMiniapps();\n}\n\n/**\n * close miniapp by appId\n */\nexport function closeMiniapp(appId: string) {\n  ExpoBoxoSdkModule.closeMiniapp(appId);\n}\n\n/**\n * Get list of miniapps\n */\nexport function getMiniapps() {\n  ExpoBoxoSdkModule.getMiniapps();\n}\n\nconst emitter = new EventEmitter(ExpoBoxoSdkModule ?? NativeModulesProxy.ExpoBoxoSdk);\n\nexport function addAuthListener(listener: (event: AuthEventPayload) => void): Subscription {\n  return emitter.addListener<AuthEventPayload>('onAuth', listener);\n}\n\nexport function addCustomEventListener(listener: (event: CustomEventData) => void): Subscription {\n  return emitter.addListener<CustomEventData>('customEvent', listener);\n}\n\nexport function addPaymentEventListener(listener: (event: PaymentData) => void): Subscription {\n  return emitter.addListener<PaymentData>('paymentEvent', listener);\n}\n\nexport function addMiniappLifecycleListener(listener: (lifecycleData: LifecycleData) => void): Subscription {\n  return emitter.addListener<LifecycleData>('miniappLifecycle', listener);\n}\n\nexport function addMiniappListListener(listener: (result: MiniappListResult) => void): Subscription {\n  return emitter.addListener<MiniappListResult>('miniappList', listener);\n}\n\nexport { MiniappListResult, MiniappData, LifecycleData, CustomEventData, PaymentData, AuthEventPayload, ConfigOptions, MiniappOptions };\n"]}